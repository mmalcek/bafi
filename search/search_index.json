{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BaFi Universal JSON, BSON, YAML, XML converter to ANY format using templates Github repository - https://github.com/mmalcek/bafi Releases (Windows, MAC, Linux) - https://github.com/mmalcek/bafi/releases Key features Various input formats (json, bson, yaml, xml) Flexible output formatting using text templates Support for LUA custom functions which allows very flexible data manipulation stdin/stdout support which allows get data from source -> translate -> delivery to destination. This allows easily translate data between different web services like REST to SOAP, SOAP to REST, REST to CSV, ... Command line arguments \"-i input.xml\" Input file name. If not defined app tries read stdin \"-o output.txt\" Output file name. If not defined result is send to stdout \"-t template.tmpl\" Template file. Alternatively you can use inline template inline template must start with ? e.g. -t \"?{{.someValue}}\" \"-f json\" Alternative input format. Supported formats: json, bson, yaml, xml (default) \"-v\" - Show current verion \"-?\" - list available command line arguments Example: ( more examples ) bafi.exe -i testdata.xml -t template.tmpl -o output.txt Templates Bafi uses text/template . Here is a quick summary how to use. Examples are based on testdata.xml included in project Comments {{/* a comment */}} {{- /* a comment with white space trimmed from preceding and following text */ -}} Trim new line New line before or after text can be trimmed by adding dash {{- .TOP_LEVEL}}, {{.TOP_LEVEL -}} Accessing data Data are accessible by pipline which is represented by dot Simplest template {{.}} Get data form inner node {{.TOP_LEVEL}} Get data from XML tag. XML tags are autoprefixed by dash and accessible as index {{index .TOP_LEVEL \"-description\"}} Convert TOP_LEVEL node to JSON {{toJSON .TOP_LEVEL}} Variables You can store selected data to template variable {{$myVar := .TOP_LEVEL}} Actions Template allows to use actions , for example Iterate over lines {{range .TOP_LEVEL.DATA_LINE}}{{.val1}}{{end}} If statement {{if gt (int $val1) (int $val2)}}Value1{{else}}Value2{{end}} is greater Functions In go template all data manipulation is done by using functions for example count val1+val2 {{add $val1 $val2}} count (val1+val2)/val3 {{div (add $val1 $val2) $val3}} There are 3 categories of functions Native functions text/template integrates native functions to work with data Additional functions Asside of integated functions bafi contains additional common functions add - {{add .Value1 .Value2}} add1 - {{add1 .Value1}} = Value1+1 sub - substract div - divide mod - modulo mul - multiply randInt add1f - \"...f\" functions parse float but provide decimal operations using shopspring decimal addf subf divf mulf round - {{round .Value1 2}} - will round to 2 decimals max - {{round .Value1 .Value2 .Value3 ...}} get Max value from range min - get Min value from range maxf minf dateFormat -> {{dateFormat .Value \"oldFormat\" \"newFormat\"}} - GO time format now - {{now \"02.01.2006\"}} - GO format date (see notes below) b64enc - encode to base64 b64dec - decode from base64 b32enc - oncode to base32 b32dec - decode from base32 uuid - generate UUID regexMatch - {{regexMatch pattern .Value1}} more about go regex upper - to uppercase lower - to lowercase trim trimAll trimSuffix trimPrefix atoi int64 int float64 toJSON - convert input object to JSON toBSON - convert input object to BSON toYAML - convert input object to YAML toXML - convert input object to XML mapJSON - convert stringified JSON to map so it can be used as object or translated to other formats (e.g. \"toXML\"). Check template.tmpl for example Lua custom functions You can write your own custom lua functions defined in ./lua/functions.lua file Call Lua function in template (\"sum\" - Lua function name) {{lua \"sum\" .val1 .val2}} Input is always passed as stringified JSON and should be decoded (json.decode(incomingData)) Output must be passed as string lua table array starts with 1 Lua documentation Minimal functions.lua example json = require './lua/json' function sum(incomingData) dataTable = json.decode(incomingData) return tostring(tonumber(dataTable[1]) + tonumber(dataTable[2])) end Check examples and template.tmpl and testdata.xml for advanced examples","title":"Application"},{"location":"#bafi","text":"Universal JSON, BSON, YAML, XML converter to ANY format using templates Github repository - https://github.com/mmalcek/bafi Releases (Windows, MAC, Linux) - https://github.com/mmalcek/bafi/releases","title":"BaFi"},{"location":"#key-features","text":"Various input formats (json, bson, yaml, xml) Flexible output formatting using text templates Support for LUA custom functions which allows very flexible data manipulation stdin/stdout support which allows get data from source -> translate -> delivery to destination. This allows easily translate data between different web services like REST to SOAP, SOAP to REST, REST to CSV, ...","title":"Key features"},{"location":"#command-line-arguments","text":"\"-i input.xml\" Input file name. If not defined app tries read stdin \"-o output.txt\" Output file name. If not defined result is send to stdout \"-t template.tmpl\" Template file. Alternatively you can use inline template inline template must start with ? e.g. -t \"?{{.someValue}}\" \"-f json\" Alternative input format. Supported formats: json, bson, yaml, xml (default) \"-v\" - Show current verion \"-?\" - list available command line arguments Example: ( more examples ) bafi.exe -i testdata.xml -t template.tmpl -o output.txt","title":"Command line arguments"},{"location":"#templates","text":"Bafi uses text/template . Here is a quick summary how to use. Examples are based on testdata.xml included in project","title":"Templates"},{"location":"#comments","text":"{{/* a comment */}} {{- /* a comment with white space trimmed from preceding and following text */ -}}","title":"Comments"},{"location":"#trim-new-line","text":"New line before or after text can be trimmed by adding dash {{- .TOP_LEVEL}}, {{.TOP_LEVEL -}}","title":"Trim new line"},{"location":"#accessing-data","text":"Data are accessible by pipline which is represented by dot Simplest template {{.}} Get data form inner node {{.TOP_LEVEL}} Get data from XML tag. XML tags are autoprefixed by dash and accessible as index {{index .TOP_LEVEL \"-description\"}} Convert TOP_LEVEL node to JSON {{toJSON .TOP_LEVEL}}","title":"Accessing data"},{"location":"#variables","text":"You can store selected data to template variable {{$myVar := .TOP_LEVEL}}","title":"Variables"},{"location":"#actions","text":"Template allows to use actions , for example Iterate over lines {{range .TOP_LEVEL.DATA_LINE}}{{.val1}}{{end}} If statement {{if gt (int $val1) (int $val2)}}Value1{{else}}Value2{{end}} is greater","title":"Actions"},{"location":"#functions","text":"In go template all data manipulation is done by using functions for example count val1+val2 {{add $val1 $val2}} count (val1+val2)/val3 {{div (add $val1 $val2) $val3}} There are 3 categories of functions","title":"Functions"},{"location":"#native-functions","text":"text/template integrates native functions to work with data","title":"Native functions"},{"location":"#additional-functions","text":"Asside of integated functions bafi contains additional common functions add - {{add .Value1 .Value2}} add1 - {{add1 .Value1}} = Value1+1 sub - substract div - divide mod - modulo mul - multiply randInt add1f - \"...f\" functions parse float but provide decimal operations using shopspring decimal addf subf divf mulf round - {{round .Value1 2}} - will round to 2 decimals max - {{round .Value1 .Value2 .Value3 ...}} get Max value from range min - get Min value from range maxf minf dateFormat -> {{dateFormat .Value \"oldFormat\" \"newFormat\"}} - GO time format now - {{now \"02.01.2006\"}} - GO format date (see notes below) b64enc - encode to base64 b64dec - decode from base64 b32enc - oncode to base32 b32dec - decode from base32 uuid - generate UUID regexMatch - {{regexMatch pattern .Value1}} more about go regex upper - to uppercase lower - to lowercase trim trimAll trimSuffix trimPrefix atoi int64 int float64 toJSON - convert input object to JSON toBSON - convert input object to BSON toYAML - convert input object to YAML toXML - convert input object to XML mapJSON - convert stringified JSON to map so it can be used as object or translated to other formats (e.g. \"toXML\"). Check template.tmpl for example","title":"Additional functions"},{"location":"#lua-custom-functions","text":"You can write your own custom lua functions defined in ./lua/functions.lua file Call Lua function in template (\"sum\" - Lua function name) {{lua \"sum\" .val1 .val2}} Input is always passed as stringified JSON and should be decoded (json.decode(incomingData)) Output must be passed as string lua table array starts with 1 Lua documentation Minimal functions.lua example json = require './lua/json' function sum(incomingData) dataTable = json.decode(incomingData) return tostring(tonumber(dataTable[1]) + tonumber(dataTable[2])) end Check examples and template.tmpl and testdata.xml for advanced examples","title":"Lua custom functions"},{"location":"examples/","text":"Examples Command line Basic Get data from testdata.xml -> process using template.tmpl -> save output as output.txt bafi.exe -i testdata.xml -t template.tmpl -o output.txt Inline template Get data from testdata.xml -> process using inline template -> save output as output.json bafi.exe -i testdata.xml -o output.json -t \"?{{toJSON .}}\" note: BaFi inline template must start with ? e.g. \"?{{toJSON .}}\" How to format inline templates Stdin/REST Get data from REST api -> convert to XML -> output to Stdout. curl.exe -s https://api.predic8.de/shop/customers/ | bafi.exe -f json -t \"?{{toXML .}}\" More info about curl here but you can of course use any tool with stdout Template Examples are based on testdata.tmpl included in project XML to CSV command bafi.exe -i testdata.xml -t myTemplate.tmpl -o output.csv myTemplate.tmpl Employee,Date,val1,val2,val3,SUM,LuaMultiply,linkedText {{- range .TOP_LEVEL.DATA_LINE}} {{index .Employee \"-ID\"}}, {{- dateFormat .Trans_Date \"2006-01-02\" \"02.01.2006\"}}, {{- .val1}},{{.val2}},{{.val3}}, {{- add .val1 .val2}}, {{- lua \"mul\" .val1 .val2}},\"{{index .Linked_Text \"-VALUE\"}}\" {{- end}} REST to HTML command curl.exe -s https://api.predic8.de/shop/customers/ | bafi.exe -f json -t myTemplate.tmpl -o output.html myTemplate.tmpl <html> <body> <table> <tr><th>Name</th><th>Surname</th></tr> {{- range .customers}} <tr><td>{{.firstname}}</td><td>{{.lastname}}</td></tr> {{- end }} </table> </body> </html> <style> table, th, td { border: 1px solid black; width: 400px; } </style> REST to custom XML command curl.exe -s https://api.predic8.de/shop/customers/ | bafi.exe -f json -t myTemplate.tmpl -o output.xml myTemplate.tmpl <?xml version=\"1.0\" encoding=\"utf-8\"?> <MY_DATA> {{- range .customers}} <CUSTOMMER> <NAME>{{.firstname}}</NAME> <SURNAME>{{.lastname}}</SURNAME> </CUSTOMMER> {{- end }} </MY_DATA> XML to custom JSON command bafi.exe -i testdata.xml -t myTemplate.tmpl -o output.json myTemplate.tmpl {{- $new := \"{\\\"employees\\\": [\" }} {{- range .TOP_LEVEL.DATA_LINE}} {{- $new = print $new \"{\\\"employeeID\\\":\\\"\" (index .Employee \"-ID\") \"\\\", \\\"val1\\\":\" .val1 \"},\" }} {{- end}} {{- /* \"slice $new 0 (sub (len $new) 1\" - remove trailing comma */}} {{- $new = print (slice $new 0 (sub (len $new) 1)) \"]}\" }} {{ $new}} JSON in $new variable can be mapped to struct and autoformatted to other formats like: Transform $new to YAML {{toYAML (mapJSON $new) -}} Transform $new to XML {{toXML (mapJSON $new) -}} Input autoformat to??? Input data can be easily fomated to oher formats by functions toXML,toJSON,toBSON,toYAML . In this case its not necesarry add template file because it's as easy as curl.exe -s https://api.predic8.de/shop/customers/ | bafi.exe -f json -t \"?{{toXML .}}\" -o output.xml curl.exe -s https://api.predic8.de/shop/customers/ | bafi.exe -f json -t \"?{{toJSON .}}\" -o output.json curl.exe -s https://api.predic8.de/shop/customers/ | bafi.exe -f json -t \"?{{toBSON .}}\" -o output.bson curl.exe -s https://api.predic8.de/shop/customers/ | bafi.exe -f json -t \"?{{toYAML .}}\" -o output.yml","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#command-line","text":"","title":"Command line"},{"location":"examples/#basic","text":"Get data from testdata.xml -> process using template.tmpl -> save output as output.txt bafi.exe -i testdata.xml -t template.tmpl -o output.txt","title":"Basic"},{"location":"examples/#inline-template","text":"Get data from testdata.xml -> process using inline template -> save output as output.json bafi.exe -i testdata.xml -o output.json -t \"?{{toJSON .}}\" note: BaFi inline template must start with ? e.g. \"?{{toJSON .}}\" How to format inline templates","title":"Inline template"},{"location":"examples/#stdinrest","text":"Get data from REST api -> convert to XML -> output to Stdout. curl.exe -s https://api.predic8.de/shop/customers/ | bafi.exe -f json -t \"?{{toXML .}}\" More info about curl here but you can of course use any tool with stdout","title":"Stdin/REST"},{"location":"examples/#template","text":"Examples are based on testdata.tmpl included in project","title":"Template"},{"location":"examples/#xml-to-csv","text":"command bafi.exe -i testdata.xml -t myTemplate.tmpl -o output.csv myTemplate.tmpl Employee,Date,val1,val2,val3,SUM,LuaMultiply,linkedText {{- range .TOP_LEVEL.DATA_LINE}} {{index .Employee \"-ID\"}}, {{- dateFormat .Trans_Date \"2006-01-02\" \"02.01.2006\"}}, {{- .val1}},{{.val2}},{{.val3}}, {{- add .val1 .val2}}, {{- lua \"mul\" .val1 .val2}},\"{{index .Linked_Text \"-VALUE\"}}\" {{- end}}","title":"XML to CSV"},{"location":"examples/#rest-to-html","text":"command curl.exe -s https://api.predic8.de/shop/customers/ | bafi.exe -f json -t myTemplate.tmpl -o output.html myTemplate.tmpl <html> <body> <table> <tr><th>Name</th><th>Surname</th></tr> {{- range .customers}} <tr><td>{{.firstname}}</td><td>{{.lastname}}</td></tr> {{- end }} </table> </body> </html> <style> table, th, td { border: 1px solid black; width: 400px; } </style>","title":"REST to HTML"},{"location":"examples/#rest-to-custom-xml","text":"command curl.exe -s https://api.predic8.de/shop/customers/ | bafi.exe -f json -t myTemplate.tmpl -o output.xml myTemplate.tmpl <?xml version=\"1.0\" encoding=\"utf-8\"?> <MY_DATA> {{- range .customers}} <CUSTOMMER> <NAME>{{.firstname}}</NAME> <SURNAME>{{.lastname}}</SURNAME> </CUSTOMMER> {{- end }} </MY_DATA>","title":"REST to custom XML"},{"location":"examples/#xml-to-custom-json","text":"command bafi.exe -i testdata.xml -t myTemplate.tmpl -o output.json myTemplate.tmpl {{- $new := \"{\\\"employees\\\": [\" }} {{- range .TOP_LEVEL.DATA_LINE}} {{- $new = print $new \"{\\\"employeeID\\\":\\\"\" (index .Employee \"-ID\") \"\\\", \\\"val1\\\":\" .val1 \"},\" }} {{- end}} {{- /* \"slice $new 0 (sub (len $new) 1\" - remove trailing comma */}} {{- $new = print (slice $new 0 (sub (len $new) 1)) \"]}\" }} {{ $new}} JSON in $new variable can be mapped to struct and autoformatted to other formats like: Transform $new to YAML {{toYAML (mapJSON $new) -}} Transform $new to XML {{toXML (mapJSON $new) -}}","title":"XML to custom JSON"},{"location":"examples/#input-autoformat-to","text":"Input data can be easily fomated to oher formats by functions toXML,toJSON,toBSON,toYAML . In this case its not necesarry add template file because it's as easy as curl.exe -s https://api.predic8.de/shop/customers/ | bafi.exe -f json -t \"?{{toXML .}}\" -o output.xml curl.exe -s https://api.predic8.de/shop/customers/ | bafi.exe -f json -t \"?{{toJSON .}}\" -o output.json curl.exe -s https://api.predic8.de/shop/customers/ | bafi.exe -f json -t \"?{{toBSON .}}\" -o output.bson curl.exe -s https://api.predic8.de/shop/customers/ | bafi.exe -f json -t \"?{{toYAML .}}\" -o output.yml","title":"Input autoformat to???"}]}